# rename column
names(df_boat_move)[names(df_boat_move) == "unique.single_ins.READING_TIME."] <- "READING_TIME"
# add location in lockage
df_boat_move$CURRENT_VESSEL_LOCATION <- single_ins$CURRENT_VESSEL_LOCATION[single_ins$READING_TIME == df_boat_move$READING_TIME]
# add same keyframe animations
df_boat_move <- data.frame(df_boat_move[order(df_boat_move$READING_TIME),])
row.names(df_boat_move) <- NULL
df_boat_move$KEYFRAME_ID <- seq(from=1, to=100, length = nrow(df_boat_move))
# read through and get x location
df_boat_move$X_LOC <- ""
# need to read through and assign different step values depending on where the boat is in the lock
start <- 5
indexStart <- 1
for (locationIndex in 1:nrow(locations)) {
count <- length(df_boat_move$CURRENT_VESSEL_LOCATION[df_boat_move$CURRENT_VESSEL_LOCATION == locations$unique.single_boat.CURRENT_VESSEL_LOCATION.[locationIndex]])
current <- locations$unique.single_boat.CURRENT_VESSEL_LOCATION.[locationIndex]
indexEnd <- indexStart + count - 1
# current end of X location
currentEnd <- locations$X_END[locationIndex]
# assign group the sequence
df_boat_move$X_LOC[indexStart:indexEnd] <- seq(from=start, to=currentEnd, length = (indexEnd - indexStart + 1))
indexStart <- indexEnd + 1
start <- currentEnd
}
df_boat_move <- data.frame(unique(single_ins$READING_TIME))
# rename column
names(df_boat_move)[names(df_boat_move) == "unique.single_ins.READING_TIME."] <- "READING_TIME"
# add location in lockage
df_boat_move$CURRENT_VESSEL_LOCATION <- single_ins$CURRENT_VESSEL_LOCATION[single_ins$READING_TIME == df_boat_move$READING_TIME]
# add same keyframe animations
df_boat_move <- data.frame(df_boat_move[order(df_boat_move$READING_TIME),])
row.names(df_boat_move) <- NULL
df_boat_move$KEYFRAME_ID <- seq(from=1, to=100, length = nrow(df_boat_move))
# read through and get x location
df_boat_move$X_LOC <- ""
# need to read through and assign different step values depending on where the boat is in the lock
start <- 5
indexStart <- 1
for (locationIndex in 1:nrow(locations)) {
count <- length(df_boat_move$CURRENT_VESSEL_LOCATION[df_boat_move$CURRENT_VESSEL_LOCATION == locations$unique.single_boat.CURRENT_VESSEL_LOCATION.[locationIndex]])
current <- locations$unique.single_boat.CURRENT_VESSEL_LOCATION.[locationIndex]
indexEnd <- indexStart + count - 1
# current end of X location
currentEnd <- locations$X_END[locationIndex]
# assign group the sequence
df_boat_move$X_LOC[indexStart:indexEnd] <- seq(from=start, to=currentEnd, length = (indexEnd - indexStart + 1))
indexStart <- indexEnd + 1
start <- currentEnd
}
svg_boat_anim <- minisvg::parse_svg_doc("C:/Workspace/GIT/Panama Infographic/man/figures/total_lock_cross_section.svg")
id <- 'boat'
# create keyname declarations
key_name = paste('anim_', id, sep="")
my_frame <- minicss::Keyframes$new(name = key_name)
for (rowIndex in 1:nrow(df_boat_move)) {
dist <- df_boat_move$X_LOC[rowIndex]
keyFrame <- df_boat_move$KEYFRAME_ID[rowIndex]
# add to keyframe
my_frame$add(time = paste(keyFrame, "%",sep = ""), transform = paste('translate(', dist, "px, 28px) scale(.04)",sep=""))
}
svg_boat_anim$add_css(as.character(my_frame))
anim_dur <- 60                    # animation duration in seconds
iter_count = 'infinite'
dir = 'normal'
# define the css animation
new_css <- Style$new(paste("#", id, sep=""))
# update with animation declaration
new_css$update(css_prop$animation(name = key_name, duration = anim_dur, iteration_count = iter_count, direction = dir))
# add that new css to the svg
svg_boat_anim$add_css(as.character(new_css))
minisvg::knit_print.SVGDocument(svg_boat_anim)
library(minisvg)
library(minicss)
library(colorspace)
library(minisvg)
library(minicss)
library(colorspace)
# function to pull out shape id from the svg
get_ids <- function(SVG_name) {
draw_group <- SVG_name$children[[5]]$children
# create empty list
df <- data.frame(matrix(ncol = 0, nrow = length(draw_group)))
df$id <- ""
# iterate then append values
for (i in 1:length(draw_group)) {
df[i,1] <- draw_group[[i]]$attribs$id
}
return(df)
}
svg_total <- minisvg::parse_svg_doc("man/figures/total_lock_cross_section.svg")
minisvg::knit_print.SVGDocument(svg_total)
svg_total <- minisvg::parse_svg_doc("man/figures/total_lock_cross_section.svg")
minisvg::knit_print.SVGDocument(svg_total)
df_svg_id <- get_ids(svg_total)
df_svg_id
df_sgr <- read.table("C:\\Workspace\\GIT\\DATA\\Infographic\\df_sgr.csv")
head(df_sgr)
unique(df_sgr$VESSEL_NAME)
boats <- unique(df_sgr$VESSEL_NAME)
for (boat in boats) {
subset <- df_sgr[df_sgr$VESSEL_NAME == boat,]
cat(boat, 'Temperature:', '\n')
cat('Max:', max(subset$TEMPERATURE_MEAS), unique(subset$TEMPERATURE_MEAS_UNIT), '\n')
cat('Min:', min(subset$TEMPERATURE_MEAS), unique(subset$TEMPERATURE_MEAS_UNIT), '\n\n')
cat(boat, 'Pressure:', '\n')
cat('Max:', max(subset$PRESSURE_MEAS), unique(subset$PRESSURE_MEAS_UNIT), '\n')
cat('Min:', min(subset$PRESSURE_MEAS), unique(subset$PRESSURE_MEAS_UNIT), '\n\n')
}
boat <- 'GUTHORM MAERSK'
# subset to get only GUTHORM data
single_boat <- df_sgr[df_sgr$VESSEL_NAME == boat,]
# view new svg
minisvg::knit_print.SVGDocument(svg_total)
# max salinity option (this is also the number of bins)
max_sal = 32
colors <- colorspace::divergingx_hcl(n = max_sal, palette = 'RdYlBu')
colors <- rev(colors)
# create a new column for the instrument name that matches the assigned id
single_boat$INS_NAME <- paste(sub(".*200-", "", single_boat$STATION_NAME), single_boat$SALINITY_GAGE_NAME, sep="_")
single_boat$COLOR <- ""
max_sal <- max_sal - 1
# assign color column based on bins and diverging colors
for(i in 0:max_sal) {
single_boat$COLOR[single_boat$SALINITY_MEAS >= i & single_boat$SALINITY_MEAS < i + 1] <- colors[i + 1]
}
# create df to compare and QA check
color_df <- data.frame(colors)
color_df$sal_min <- 0:max_sal
color_df$sal_max <- 1:(max_sal + 1)
values <- df_svg_id$id
for (value in values) {
df_svg_id$count[df_svg_id$id == value] <- length(single_boat$INS_NAME[single_boat$INS_NAME == value])
}
# test to see if readings were taken at the same time. count the number of unique readings where instrument id in the options list
print(length(unique(single_boat$READING_TIME)))
df_unique_readings <- unique(data.frame(single_boat$READING_TIME))
values <- df_unique_readings$single_boat.READING_TIME
for (value in values) {
df_unique_readings$count[df_unique_readings$single_boat.READING_TIME == value] <- length(single_boat$INS_NAME[single_boat$READING_TIME == value])
}
boat <- 'GUTHORM MAERSK'
# subset to get only GUTHORM data
single_boat <- df_sgr[df_sgr$VESSEL_NAME == boat,]
locations <- data.frame(unique(single_boat$CURRENT_VESSEL_LOCATION))
# x location of each lockage location estimated from inkscape. Could also theoretically be pulled off of a shape id
locations$X_END <- c(20,77,117,161,201,243,360)
single_ins <- single_boat[single_boat$STATION_NAME == 'U-ACAT200-LK1' & single_boat$SALINITY_GAGE_NAME == 'A',]
df_boat_move <- data.frame(unique(single_ins$READING_TIME))
# rename column
names(df_boat_move)[names(df_boat_move) == "unique.single_ins.READING_TIME."] <- "READING_TIME"
# add location in lockage
df_boat_move$CURRENT_VESSEL_LOCATION <- single_ins$CURRENT_VESSEL_LOCATION[single_ins$READING_TIME == df_boat_move$READING_TIME]
# add same keyframe animations
df_boat_move <- data.frame(df_boat_move[order(df_boat_move$READING_TIME),])
row.names(df_boat_move) <- NULL
df_boat_move$KEYFRAME_ID <- seq(from=1, to=100, length = nrow(df_boat_move))
# read through and get x location
df_boat_move$X_LOC <- ""
# need to read through and assign different step values depending on where the boat is in the lock
start <- 5
indexStart <- 1
for (locationIndex in 1:nrow(locations)) {
count <- length(df_boat_move$CURRENT_VESSEL_LOCATION[df_boat_move$CURRENT_VESSEL_LOCATION == locations$unique.single_boat.CURRENT_VESSEL_LOCATION.[locationIndex]])
current <- locations$unique.single_boat.CURRENT_VESSEL_LOCATION.[locationIndex]
indexEnd <- indexStart + count - 1
# current end of X location
currentEnd <- locations$X_END[locationIndex]
# assign group the sequence
df_boat_move$X_LOC[indexStart:indexEnd] <- seq(from=start, to=currentEnd, length = (indexEnd - indexStart + 1))
indexStart <- indexEnd + 1
start <- currentEnd
}
View(df_boat_move)
boats <- unique(df_sgr$VESSEL_NAME)
anim_dur <- 60                     # animation duration in seconds
iter_count = 'infinite'
dir = 'normal'
for (boat in boats) {
cat('Initiallizing Script')
cat('\n\n')
#-----------------------------------------------------------------------------------------------------------------------------------#
# Instruments
cat("Starting: ", boat)
cat('\n')
# get a fresh copy of the template
svg_total <- minisvg::parse_svg_doc("man/figures/total_lock_cross_section.svg")
df_svg_id <- get_ids(svg_total)
df_svg_id
# subset to get only boat data
single_boat <- df_sgr[df_sgr$VESSEL_NAME == boat,]
# max salinity option (this is also the number of bins)
max_sal = 32
colors <- colorspace::divergingx_hcl(n = max_sal, palette = 'RdYlBu')
colors <- rev(colors)
# create a new column for the instrument name that matches the assigned id
single_boat$INS_NAME <- paste(sub(".*200-", "", single_boat$STATION_NAME), single_boat$SALINITY_GAGE_NAME, sep="_")
single_boat$COLOR <- ""
max_sal <- max_sal - 1
# assign color column based on bins and diverging colors
for(i in 0:max_sal) {
single_boat$COLOR[single_boat$SALINITY_MEAS >= i & single_boat$SALINITY_MEAS < i + 1] <- colors[i + 1]
}
# create df to compare and QA check
color_df <- data.frame(colors)
color_df$sal_min <- 0:max_sal
color_df$sal_max <- 1:(max_sal + 1)
values <- df_svg_id$id
for (value in values) {
df_svg_id$count[df_svg_id$id == value] <- length(single_boat$INS_NAME[single_boat$INS_NAME == value])
}
# test to see if readings were taken at the same time. count the number of unique readings where instrument id in the options list
df_unique_readings <- unique(data.frame(single_boat$READING_TIME))
values <- df_unique_readings$single_boat.READING_TIME
for (value in values) {
df_unique_readings$count[df_unique_readings$single_boat.READING_TIME == value] <- length(single_boat$INS_NAME[single_boat$READING_TIME == value])
}
instruments <- unique(single_boat$INS_NAME)
# create a keyframe df
df_keyframe <- data.frame(unique(single_boat$READING_TIME))
df_keyframe <- data.frame(df_keyframe[order(df_keyframe$unique.single_boat.READING_TIME.),])
df_keyframe$KEYFRAME_ID <- seq(from=1, to=100, length = nrow(df_keyframe))
#rename column
names(df_keyframe)[names(df_keyframe) == "df_keyframe.order.df_keyframe.unique.single_boat.READING_TIME...."] <- "READING_TIME"
for (insIndex in 1:length(instruments)) {
instrument <- instruments[insIndex]
cat('(', insIndex, '/', length(instruments), ') ')
cat('Starting:', instrument)
# find sub selection of readings
insReadings <- single_boat[single_boat$INS_NAME == instrument,]
# put them in order
insReadings <-insReadings[order(insReadings$READING_TIME),]
cat('-')
# create keyname declarations
key_name = paste('anim_', instrument, sep="")
my_frame <- minicss::Keyframes$new(name = key_name)
for (rowIndex in 1:nrow(df_keyframe)) {
currentReading <- df_keyframe$READING_TIME[rowIndex]
if (length(insReadings$READING_TIME[grepl(currentReading, insReadings$READING_TIME)]) == 1) {
colorVal <- insReadings$COLOR[insReadings$READING_TIME == currentReading]
} else {
colorVal <- '#000000'
}
my_frame$add(time = paste(df_keyframe$KEYFRAME_ID[rowIndex], "%",sep = ""), fill = colorVal)
}
svg_total$add_css(as.character(my_frame))
cat('-')
################################################################################################## Define the animation
this_id <- instrument
# define the css animation
new_css <- Style$new(paste("#", this_id, sep=""))
# update with animation declaration
new_css$update(css_prop$animation(name = key_name, duration = anim_dur, iteration_count = iter_count, direction = dir))
# add that new css to the svg
svg_total$add_css(as.character(new_css))
cat('-')
}
#-----------------------------------------------------------------------------------------------------------------------------------#
# Labels
# assign the labels manually in css to add the !important declaration
svg_total$add_css(paste("#scale_low { fill: ", color_df[1,1] ,"!important;}", sep=""))
svg_total$add_css(paste("#scale_mid { fill: ", color_df[16,1] ,"!important;}", sep=""))
svg_total$add_css(paste("#scale_high { fill: ", color_df[32,1] ,"!important;}", sep=""))
cat('-')
#-----------------------------------------------------------------------------------------------------------------------------------#
# Boat Animation
id <- 'boat'
# create keyname declarations
key_name = paste('anim_', id, sep="")
my_frame <- minicss::Keyframes$new(name = key_name)
for (rowIndex in 1:nrow(df_boat_move)) {
dist <- df_boat_move$X_LOC[rowIndex]
keyFrame <- df_boat_move$KEYFRAME_ID[rowIndex]
# add to keyframe
my_frame$add(time = paste(keyFrame, "%",sep = ""), transform = paste('translate(', dist, "px, 28px) scale(.04)",sep=""))
}
svg_total$add_css(as.character(my_frame))
# define the css animation
new_css <- Style$new(paste("#", id, sep=""))
# update with animation declaration
new_css$update(css_prop$animation(name = key_name, duration = anim_dur, iteration_count = iter_count, direction = dir))
# add that new css to the svg
svg_total$add_css(as.character(new_css))
cat('-')
#-----------------------------------------------------------------------------------------------------------------------------------#
# Temperature
cat('-')
#-----------------------------------------------------------------------------------------------------------------------------------#
# Pressure
# write image
cat('-')
writeLines(as.character(svg_total), paste("man/figures/", boat, "_total_new.svg", sep=""))
cat('-Complete')
cat('\n')
cat(boat, 'File written. Moving to next boat')
cat('\n')
}
boat <- 'GUTHORM MAERSK'
# subset to get only GUTHORM data
single_boat <- df_sgr[df_sgr$VESSEL_NAME == boat,]
# view new svg
minisvg::knit_print.SVGDocument(svg_total)
svg_total <- minisvg::parse_svg_doc("man/figures/total_lock_cross_section.svg")
minisvg::knit_print.SVGDocument(svg_total)
df_svg_id <- get_ids(svg_total)
df_svg_id
unique(df_sgr$VESSEL_NAME)
boats <- unique(df_sgr$VESSEL_NAME)
for (boat in boats) {
subset <- df_sgr[df_sgr$VESSEL_NAME == boat,]
cat(boat, 'Temperature:', '\n')
cat('Max:', max(subset$TEMPERATURE_MEAS), unique(subset$TEMPERATURE_MEAS_UNIT), '\n')
cat('Min:', min(subset$TEMPERATURE_MEAS), unique(subset$TEMPERATURE_MEAS_UNIT), '\n\n')
cat(boat, 'Pressure:', '\n')
cat('Max:', max(subset$PRESSURE_MEAS), unique(subset$PRESSURE_MEAS_UNIT), '\n')
cat('Min:', min(subset$PRESSURE_MEAS), unique(subset$PRESSURE_MEAS_UNIT), '\n\n')
}
boat <- 'GUTHORM MAERSK'
# subset to get only GUTHORM data
single_boat <- df_sgr[df_sgr$VESSEL_NAME == boat,]
# view new svg
minisvg::knit_print.SVGDocument(svg_total)
boat <- 'GUTHORM MAERSK'
# subset to get only GUTHORM data
single_boat <- df_sgr[df_sgr$VESSEL_NAME == boat,]
# max salinity option (this is also the number of bins)
max_sal = 32
colors <- colorspace::divergingx_hcl(n = max_sal, palette = 'RdYlBu')
colors <- rev(colors)
# create a new column for the instrument name that matches the assigned id
single_boat$INS_NAME <- paste(sub(".*200-", "", single_boat$STATION_NAME), single_boat$SALINITY_GAGE_NAME, sep="_")
single_boat$COLOR <- ""
max_sal <- max_sal - 1
# assign color column based on bins and diverging colors
for(i in 0:max_sal) {
single_boat$COLOR[single_boat$SALINITY_MEAS >= i & single_boat$SALINITY_MEAS < i + 1] <- colors[i + 1]
}
# create df to compare and QA check
color_df <- data.frame(colors)
color_df$sal_min <- 0:max_sal
color_df$sal_max <- 1:(max_sal + 1)
values <- df_svg_id$id
for (value in values) {
df_svg_id$count[df_svg_id$id == value] <- length(single_boat$INS_NAME[single_boat$INS_NAME == value])
}
# test to see if readings were taken at the same time. count the number of unique readings where instrument id in the options list
print(length(unique(single_boat$READING_TIME)))
df_unique_readings <- unique(data.frame(single_boat$READING_TIME))
values <- df_unique_readings$single_boat.READING_TIME
for (value in values) {
df_unique_readings$count[df_unique_readings$single_boat.READING_TIME == value] <- length(single_boat$INS_NAME[single_boat$READING_TIME == value])
}
boat <- 'GUTHORM MAERSK'
# subset to get only GUTHORM data
single_boat <- df_sgr[df_sgr$VESSEL_NAME == boat,]
locations <- data.frame(unique(single_boat$CURRENT_VESSEL_LOCATION))
# x location of each lockage location estimated from inkscape. Could also theoretically be pulled off of a shape id
locations$X_END <- c(20,77,117,161,201,243,360)
single_ins <- single_boat[single_boat$STATION_NAME == 'U-ACAT200-LK1' & single_boat$SALINITY_GAGE_NAME == 'A',]
df_boat_move <- data.frame(unique(single_ins$READING_TIME))
# rename column
names(df_boat_move)[names(df_boat_move) == "unique.single_ins.READING_TIME."] <- "READING_TIME"
# add location in lockage
df_boat_move$CURRENT_VESSEL_LOCATION <- single_ins$CURRENT_VESSEL_LOCATION[single_ins$READING_TIME == df_boat_move$READING_TIME]
# add same keyframe animations
df_boat_move <- data.frame(df_boat_move[order(df_boat_move$READING_TIME),])
row.names(df_boat_move) <- NULL
df_boat_move$KEYFRAME_ID <- seq(from=1, to=100, length = nrow(df_boat_move))
# read through and get x location
df_boat_move$X_LOC <- ""
# need to read through and assign different step values depending on where the boat is in the lock
start <- 5
indexStart <- 1
for (locationIndex in 1:nrow(locations)) {
count <- length(df_boat_move$CURRENT_VESSEL_LOCATION[df_boat_move$CURRENT_VESSEL_LOCATION == locations$unique.single_boat.CURRENT_VESSEL_LOCATION.[locationIndex]])
current <- locations$unique.single_boat.CURRENT_VESSEL_LOCATION.[locationIndex]
indexEnd <- indexStart + count - 1
# current end of X location
currentEnd <- locations$X_END[locationIndex]
# assign group the sequence
df_boat_move$X_LOC[indexStart:indexEnd] <- seq(from=start, to=currentEnd, length = (indexEnd - indexStart + 1))
indexStart <- indexEnd + 1
start <- currentEnd
}
svg_total <- minisvg::parse_svg_doc("man/figures/total_lock_cross_section.svg")
boats <- unique(df_sgr$VESSEL_NAME)
anim_dur <- 60                     # animation duration in seconds
iter_count = 'infinite'
dir = 'normal'
for (boat in boats) {
cat('Initiallizing Script')
cat('\n\n')
#-----------------------------------------------------------------------------------------------------------------------------------#
# Instruments
cat("Starting: ", boat)
cat('\n')
# get a fresh copy of the template
svg_total <- minisvg::parse_svg_doc("man/figures/total_lock_cross_section.svg")
df_svg_id <- get_ids(svg_total)
df_svg_id
# subset to get only boat data
single_boat <- df_sgr[df_sgr$VESSEL_NAME == boat,]
# max salinity option (this is also the number of bins)
max_sal = 32
colors <- colorspace::divergingx_hcl(n = max_sal, palette = 'RdYlBu')
colors <- rev(colors)
# create a new column for the instrument name that matches the assigned id
single_boat$INS_NAME <- paste(sub(".*200-", "", single_boat$STATION_NAME), single_boat$SALINITY_GAGE_NAME, sep="_")
single_boat$COLOR <- ""
max_sal <- max_sal - 1
# assign color column based on bins and diverging colors
for(i in 0:max_sal) {
single_boat$COLOR[single_boat$SALINITY_MEAS >= i & single_boat$SALINITY_MEAS < i + 1] <- colors[i + 1]
}
# create df to compare and QA check
color_df <- data.frame(colors)
color_df$sal_min <- 0:max_sal
color_df$sal_max <- 1:(max_sal + 1)
values <- df_svg_id$id
for (value in values) {
df_svg_id$count[df_svg_id$id == value] <- length(single_boat$INS_NAME[single_boat$INS_NAME == value])
}
# test to see if readings were taken at the same time. count the number of unique readings where instrument id in the options list
df_unique_readings <- unique(data.frame(single_boat$READING_TIME))
values <- df_unique_readings$single_boat.READING_TIME
for (value in values) {
df_unique_readings$count[df_unique_readings$single_boat.READING_TIME == value] <- length(single_boat$INS_NAME[single_boat$READING_TIME == value])
}
instruments <- unique(single_boat$INS_NAME)
# create a keyframe df
df_keyframe <- data.frame(unique(single_boat$READING_TIME))
df_keyframe <- data.frame(df_keyframe[order(df_keyframe$unique.single_boat.READING_TIME.),])
df_keyframe$KEYFRAME_ID <- seq(from=1, to=100, length = nrow(df_keyframe))
#rename column
names(df_keyframe)[names(df_keyframe) == "df_keyframe.order.df_keyframe.unique.single_boat.READING_TIME...."] <- "READING_TIME"
for (insIndex in 1:length(instruments)) {
instrument <- instruments[insIndex]
cat('(', insIndex, '/', length(instruments), ') ')
cat('Starting:', instrument)
# find sub selection of readings
insReadings <- single_boat[single_boat$INS_NAME == instrument,]
# put them in order
insReadings <-insReadings[order(insReadings$READING_TIME),]
cat('-')
# create keyname declarations
key_name = paste('anim_', instrument, sep="")
my_frame <- minicss::Keyframes$new(name = key_name)
for (rowIndex in 1:nrow(df_keyframe)) {
currentReading <- df_keyframe$READING_TIME[rowIndex]
if (length(insReadings$READING_TIME[grepl(currentReading, insReadings$READING_TIME)]) == 1) {
colorVal <- insReadings$COLOR[insReadings$READING_TIME == currentReading]
} else {
colorVal <- '#000000'
}
my_frame$add(time = paste(df_keyframe$KEYFRAME_ID[rowIndex], "%",sep = ""), fill = colorVal)
}
svg_total$add_css(as.character(my_frame))
cat('-')
################################################################################################## Define the animation
this_id <- instrument
# define the css animation
new_css <- Style$new(paste("#", this_id, sep=""))
# update with animation declaration
new_css$update(css_prop$animation(name = key_name, duration = anim_dur, iteration_count = iter_count, direction = dir))
# add that new css to the svg
svg_total$add_css(as.character(new_css))
cat('-')
cat('-Complete')
cat('\n')
}
#-----------------------------------------------------------------------------------------------------------------------------------#
# Labels
# assign the labels manually in css to add the !important declaration
svg_total$add_css(paste("#scale_low { fill: ", color_df[1,1] ,"!important;}", sep=""))
svg_total$add_css(paste("#scale_mid { fill: ", color_df[16,1] ,"!important;}", sep=""))
svg_total$add_css(paste("#scale_high { fill: ", color_df[32,1] ,"!important;}", sep=""))
cat('-')
#-----------------------------------------------------------------------------------------------------------------------------------#
# Boat Animation
id <- 'boat'
# create keyname declarations
key_name = paste('anim_', id, sep="")
my_frame <- minicss::Keyframes$new(name = key_name)
for (rowIndex in 1:nrow(df_boat_move)) {
dist <- df_boat_move$X_LOC[rowIndex]
keyFrame <- df_boat_move$KEYFRAME_ID[rowIndex]
# add to keyframe
my_frame$add(time = paste(keyFrame, "%",sep = ""), transform = paste('translate(', dist, "px, 28px) scale(.04)",sep=""))
}
svg_total$add_css(as.character(my_frame))
# define the css animation
new_css <- Style$new(paste("#", id, sep=""))
# update with animation declaration
new_css$update(css_prop$animation(name = key_name, duration = anim_dur, iteration_count = iter_count, direction = dir))
# add that new css to the svg
svg_total$add_css(as.character(new_css))
cat('-')
#-----------------------------------------------------------------------------------------------------------------------------------#
# Temperature
cat('-')
#-----------------------------------------------------------------------------------------------------------------------------------#
# Pressure
# write image
cat('-')
writeLines(as.character(svg_total), paste("man/figures/", boat, "_total_new.svg", sep=""))
cat(boat, 'File written. Moving to next boat')
cat('\n')
}
View(df_sgr)
View(df_sgr)
cat('\n\n')
cat('Process has been completed. Script complete...')
View(df_svg_id)
